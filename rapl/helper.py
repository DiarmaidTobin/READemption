import concurrent.futures
import sys
from rapl.paths import Paths
from rapl.parameters import Parameters

class Helper(object):
    """Offers misc help for other classes"""

    def __init__(self):
        self.paths = Paths()
        self.parameters = Parameters()

    def get_header_of_genome_file(self, genome_file):
        """Return the shor header of a given fasta file."""
        genome_file_path = self.paths.genome_file(genome_file)
        return(open(genome_file_path).readline().split()[0][1:])

    def check_thread_completeness(self, threads):
        """Check the completness of each thread in a list

        Arguments:
        - `threads`: a list of threads generated by a 
                     ThreadPoolExecutor instance
        """
        for thread in concurrent.futures.as_completed(threads):
            if not thread.exception() == None:
                self.handle_exception(thread.exception())

    def handle_exception(self, exception):
        """Tread an exception as configured.
        
        Arguments:
        - `exception`: an exception to handle

        """
        if self.parameters.exception_handling == "report":
            sys.stderr.write(str(exception) + ".\n")
        elif self.parameters.exception_handling == "crash":
            raise(exception) 
